2020-03-08 17:15:59.873 +06:00 [INF] Starting web host
2020-03-08 17:16:01.499 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 17:16:01.975 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 17:16:02.028 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 17:16:02.178 +06:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:16:02.199 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:16:02.227 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:16:02.230 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:16:02.243 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:16:02.246 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:16:02.280 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:16:02.282 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:16:02.307 +06:00 [WRN] User d9118ea3-1f53-4369-a0e5-7df018354f9a validation failed: DuplicateUserName.
2020-03-08 17:16:02.309 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:16:02.312 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:16:02.321 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:16:02.324 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:16:02.326 +06:00 [WRN] User a2a94170-eb1f-4a50-abad-55f8dd2a3aaa validation failed: DuplicateUserName.
2020-03-08 17:16:02.375 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 17:16:02.432 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 17:16:02.809 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 17:16:02.811 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 17:16:02.831 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 17:16:02.905 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 17:16:02.974 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 17:16:02.998 +06:00 [INF] Server desktop-pcju7lj:19076:0172dd19 successfully announced in 157.5689 ms
2020-03-08 17:16:03.009 +06:00 [INF] Server desktop-pcju7lj:19076:0172dd19 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 17:16:03.075 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 17:16:03.227 +06:00 [INF] Server desktop-pcju7lj:19076:0172dd19 all the dispatchers started
2020-03-08 17:16:03.274 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 17:16:03.278 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 17:16:03.280 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 17:16:03.461 +06:00 [INF] Executed page /Index in 481.9298ms
2020-03-08 17:16:03.464 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 17:16:03.473 +06:00 [INF] Request finished in 642.6853ms 200 text/html; charset=utf-8
2020-03-08 17:16:03.827 +06:00 [INF] Worker running at: "2020-03-08T17:16:03.8275052+06:00"
2020-03-08 17:16:03.831 +06:00 [INF] Worker running at: "2020-03-08T17:16:03.8318471+06:00"
2020-03-08 17:16:03.905 +06:00 [INF] Worker running at: "2020-03-08T17:16:03.9052212+06:00"
2020-03-08 17:16:03.944 +06:00 [INF] Worker running at: "2020-03-08T17:16:03.9441593+06:00"
2020-03-08 17:16:04.047 +06:00 [INF] Worker running at: "2020-03-08T17:16:04.0478619+06:00"
2020-03-08 17:16:04.482 +06:00 [INF] Worker running at: "2020-03-08T17:16:04.4825647+06:00"
2020-03-08 17:16:05.166 +06:00 [INF] Worker running at: "2020-03-08T17:16:05.1668171+06:00"
2020-03-08 17:16:05.652 +06:00 [INF] Worker running at: "2020-03-08T17:16:05.6524794+06:00"
2020-03-08 17:16:05.652 +06:00 [INF] Worker running at: "2020-03-08T17:16:05.6525434+06:00"
2020-03-08 17:16:05.655 +06:00 [INF] Worker running at: "2020-03-08T17:16:05.6557627+06:00"
2020-03-08 17:16:05.660 +06:00 [INF] Worker running at: "2020-03-08T17:16:05.6605345+06:00"
2020-03-08 17:16:05.878 +06:00 [INF] Worker running at: "2020-03-08T17:16:05.8788366+06:00"
2020-03-08 17:16:06.279 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.2792144+06:00"
2020-03-08 17:16:06.318 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.3185360+06:00"
2020-03-08 17:16:06.331 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.3317903+06:00"
2020-03-08 17:16:06.346 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.3459619+06:00"
2020-03-08 17:16:06.349 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.3496390+06:00"
2020-03-08 17:16:06.382 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.3826081+06:00"
2020-03-08 17:16:06.397 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.3973929+06:00"
2020-03-08 17:16:06.417 +06:00 [INF] Worker running at: "2020-03-08T17:16:06.4176648+06:00"
2020-03-08 17:17:56.304 +06:00 [INF] Starting web host
2020-03-08 17:17:57.686 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 17:17:58.171 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 17:17:58.224 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 17:17:58.377 +06:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:17:58.397 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:17:58.424 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:17:58.426 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:17:58.438 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:17:58.441 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:17:58.475 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:17:58.478 +06:00 [INF] Executed DbCommand (2ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:17:58.505 +06:00 [WRN] User fb7ed4e0-809d-4b04-9f42-aac7a3fe13fa validation failed: DuplicateUserName.
2020-03-08 17:17:58.508 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:17:58.510 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:17:58.519 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:17:58.523 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:17:58.525 +06:00 [WRN] User bb10ef17-5dee-40db-a6b2-7999a40a69bd validation failed: DuplicateUserName.
2020-03-08 17:17:58.629 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 17:17:58.683 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 17:17:59.012 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 17:17:59.014 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 17:17:59.035 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 17:17:59.125 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 17:17:59.192 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 17:17:59.207 +06:00 [INF] Server desktop-pcju7lj:15928:2ed0b980 successfully announced in 147.6006 ms
2020-03-08 17:17:59.220 +06:00 [INF] Server desktop-pcju7lj:15928:2ed0b980 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 17:17:59.270 +06:00 [INF] 1 servers were removed due to timeout
2020-03-08 17:17:59.298 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 17:17:59.393 +06:00 [INF] Server desktop-pcju7lj:15928:2ed0b980 all the dispatchers started
2020-03-08 17:17:59.653 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 17:17:59.658 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 17:17:59.661 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 17:17:59.706 +06:00 [WRN] Failed to process the job '5': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:35.
System.InvalidOperationException: The type `ThreeS.Jobs.SQLJobs` does not contain a method with signature `RebuildAllIndex(CancellationToken)`
   at Hangfire.Storage.InvocationData.DeserializeJob()
2020-03-08 17:17:59.759 +06:00 [WRN] Failed to process the job '5': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:17.
System.InvalidOperationException: The type `ThreeS.Jobs.SQLJobs` does not contain a method with signature `RebuildAllIndex(CancellationToken)`
   at Hangfire.Storage.InvocationData.DeserializeJob()
2020-03-08 17:17:59.786 +06:00 [WRN] Failed to process the job '5': an exception occurred. Retry attempt 1 of 10 will be performed in 00:00:25.
System.InvalidOperationException: The type `ThreeS.Jobs.SQLJobs` does not contain a method with signature `RebuildAllIndex(CancellationToken)`
   at Hangfire.Storage.InvocationData.DeserializeJob()
2020-03-08 17:17:59.884 +06:00 [INF] Executed page /Index in 688.1825ms
2020-03-08 17:17:59.886 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 17:17:59.894 +06:00 [INF] Request finished in 861.382ms 200 text/html; charset=utf-8
2020-03-08 17:18:00.178 +06:00 [WRN] Failed to process the job '5': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:36.
System.InvalidOperationException: The type `ThreeS.Jobs.SQLJobs` does not contain a method with signature `RebuildAllIndex(CancellationToken)`
   at Hangfire.Storage.InvocationData.DeserializeJob()
2020-03-08 17:18:00.363 +06:00 [WRN] Failed to process the job '5': an exception occurred. Retry attempt 2 of 10 will be performed in 00:00:24.
System.InvalidOperationException: The type `ThreeS.Jobs.SQLJobs` does not contain a method with signature `RebuildAllIndex(CancellationToken)`
   at Hangfire.Storage.InvocationData.DeserializeJob()
2020-03-08 17:18:18.935 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs  
2020-03-08 17:18:19.017 +06:00 [INF] Request finished in 82.4426ms 200 text/html
2020-03-08 17:18:19.064 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:18:19.064 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:18:19.105 +06:00 [INF] Request finished in 41.368ms 200 text/css
2020-03-08 17:18:19.105 +06:00 [INF] Request finished in 41.368ms 200 application/javascript
2020-03-08 17:18:19.295 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:18:19.298 +06:00 [INF] Request finished in 3.2075ms 200 font/woff2
2020-03-08 17:18:21.205 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/retries  
2020-03-08 17:18:21.231 +06:00 [INF] Request finished in 26.82ms 200 text/html
2020-03-08 17:18:21.257 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:18:21.263 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:18:21.272 +06:00 [INF] Request finished in 8.5784ms 200 text/css
2020-03-08 17:18:21.280 +06:00 [INF] Request finished in 22.9951ms 200 application/javascript
2020-03-08 17:18:21.409 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:18:21.413 +06:00 [INF] Request finished in 3.7141ms 200 font/woff2
2020-03-08 17:18:23.386 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:18:23.442 +06:00 [INF] Request finished in 55.9199ms 200 application/json
2020-03-08 17:18:25.407 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/jobs/scheduled/delete application/x-www-form-urlencoded; charset=UTF-8 12
2020-03-08 17:18:25.449 +06:00 [INF] Request finished in 42.1879ms 204 
2020-03-08 17:18:25.455 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:18:25.458 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/retries  
2020-03-08 17:18:25.465 +06:00 [INF] Request finished in 9.9443ms 200 application/json
2020-03-08 17:18:25.472 +06:00 [INF] Request finished in 13.2416ms 200 text/html
2020-03-08 17:18:25.507 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:18:25.507 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:18:25.528 +06:00 [INF] Request finished in 20.8369ms 200 text/css
2020-03-08 17:18:25.537 +06:00 [INF] Request finished in 29.4467ms 200 application/javascript
2020-03-08 17:18:25.652 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:18:25.656 +06:00 [INF] Request finished in 4.1833ms 200 font/woff2
2020-03-08 17:18:27.604 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 17:18:27.621 +06:00 [INF] Request finished in 17.2918ms 200 text/html
2020-03-08 17:18:27.645 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:18:27.652 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:18:27.662 +06:00 [INF] Request finished in 16.5928ms 200 text/css
2020-03-08 17:18:27.664 +06:00 [INF] Request finished in 11.5866ms 200 application/javascript
2020-03-08 17:18:27.782 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:18:27.788 +06:00 [INF] Request finished in 4.9672ms 200 font/woff2
2020-03-08 17:18:29.770 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:18:29.786 +06:00 [INF] Request finished in 17.2292ms 200 application/json
2020-03-08 17:18:31.806 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:18:31.820 +06:00 [INF] Request finished in 13.8181ms 200 application/json
2020-03-08 17:18:33.214 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/recurring/remove application/x-www-form-urlencoded; charset=UTF-8 23
2020-03-08 17:18:33.237 +06:00 [INF] Request finished in 23.3188ms 204 
2020-03-08 17:18:33.247 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 17:18:33.257 +06:00 [INF] Request finished in 9.6063ms 200 text/html
2020-03-08 17:18:33.283 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:18:33.287 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:18:33.300 +06:00 [INF] Request finished in 16.7686ms 200 text/css
2020-03-08 17:18:33.304 +06:00 [INF] Request finished in 17.5057ms 200 application/javascript
2020-03-08 17:18:33.407 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:18:33.412 +06:00 [INF] Request finished in 5.5678ms 200 font/woff2
2020-03-08 17:18:35.271 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 17:18:35.281 +06:00 [INF] Request finished in 9.8539ms 200 text/html
2020-03-08 17:18:35.313 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:18:35.316 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:18:35.323 +06:00 [INF] Request finished in 10.3063ms 200 text/css
2020-03-08 17:18:35.329 +06:00 [INF] Request finished in 13.0634ms 200 application/javascript
2020-03-08 17:18:35.436 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:18:35.441 +06:00 [INF] Request finished in 4.9382ms 200 font/woff2
2020-03-08 17:18:35.503 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/favicon.ico  
2020-03-08 17:18:35.520 +06:00 [INF] Sending file. Request path: '/favicon.ico'. Physical path: 'C:\Users\Emon\source\repos\WorkerService1\ThreeS.Routine\wwwroot\favicon.ico'
2020-03-08 17:18:35.522 +06:00 [INF] Request finished in 19.2463ms 200 image/x-icon
2020-03-08 17:18:37.417 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:18:37.426 +06:00 [INF] Request finished in 8.6521ms 200 application/json
2020-03-08 17:18:39.437 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:18:39.444 +06:00 [INF] Request finished in 6.5782ms 200 application/json
2020-03-08 17:18:47.999 +06:00 [INF] Starting web host
2020-03-08 17:18:49.127 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 17:18:49.514 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 17:18:49.567 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 17:18:49.731 +06:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:18:49.751 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:18:49.776 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:18:49.778 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:18:49.788 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:18:49.792 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:18:49.823 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:18:49.826 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:18:49.850 +06:00 [WRN] User cd31a9c6-ecd2-4831-ad92-ef21cadcc792 validation failed: DuplicateUserName.
2020-03-08 17:18:49.853 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:18:49.856 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:18:49.866 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:18:49.869 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:18:49.871 +06:00 [WRN] User 97284679-ccfe-4319-a504-667ab3abc3b0 validation failed: DuplicateUserName.
2020-03-08 17:18:49.916 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 17:18:49.960 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 17:18:50.269 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 17:18:50.271 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 17:18:50.309 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 17:18:50.374 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 17:18:50.439 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 17:18:50.442 +06:00 [INF] Server desktop-pcju7lj:20668:00c8c808 successfully announced in 127.6722 ms
2020-03-08 17:18:50.452 +06:00 [INF] Server desktop-pcju7lj:20668:00c8c808 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 17:18:50.656 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 17:18:50.664 +06:00 [INF] Server desktop-pcju7lj:20668:00c8c808 all the dispatchers started
2020-03-08 17:18:50.765 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 17:18:50.769 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 17:18:50.771 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 17:18:50.916 +06:00 [INF] Executed page /Index in 473.10760000000005ms
2020-03-08 17:18:50.918 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 17:18:50.925 +06:00 [INF] Request finished in 630.8142ms 200 text/html; charset=utf-8
2020-03-08 17:19:13.119 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs  
2020-03-08 17:19:13.206 +06:00 [INF] Request finished in 86.5771ms 200 text/html
2020-03-08 17:19:13.240 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:13.240 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:13.293 +06:00 [INF] Request finished in 52.665ms 200 application/javascript
2020-03-08 17:19:13.293 +06:00 [INF] Request finished in 53.3893ms 200 text/css
2020-03-08 17:19:13.488 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:13.491 +06:00 [INF] Request finished in 2.6132ms 200 font/woff2
2020-03-08 17:19:15.198 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 17:19:15.230 +06:00 [INF] Request finished in 32.2963ms 200 text/html
2020-03-08 17:19:15.256 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:15.260 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:15.276 +06:00 [INF] Request finished in 15.7799ms 200 application/javascript
2020-03-08 17:19:15.276 +06:00 [INF] Request finished in 19.3452ms 200 text/css
2020-03-08 17:19:15.409 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:15.416 +06:00 [INF] Request finished in 4.3368ms 200 font/woff2
2020-03-08 17:19:17.399 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 17:19:17.439 +06:00 [INF] Request finished in 41.0209ms 200 application/json
2020-03-08 17:19:18.543 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/recurring/trigger application/x-www-form-urlencoded; charset=UTF-8 23
2020-03-08 17:19:18.695 +06:00 [INF] Request finished in 152.4009ms 204 
2020-03-08 17:19:18.710 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 17:19:18.784 +06:00 [INF] Request finished in 73.7321ms 200 text/html
2020-03-08 17:19:18.821 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:18.822 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:18.830 +06:00 [INF] Request finished in 7.9892ms 200 text/css
2020-03-08 17:19:18.833 +06:00 [INF] Request finished in 12.1757ms 200 application/javascript
2020-03-08 17:19:18.960 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:18.963 +06:00 [INF] Request finished in 2.8969ms 200 font/woff2
2020-03-08 17:19:20.755 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 17:19:20.788 +06:00 [INF] Request finished in 33.2433ms 200 text/html
2020-03-08 17:19:20.832 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:20.834 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:20.851 +06:00 [INF] Request finished in 18.4622ms 200 text/css
2020-03-08 17:19:20.867 +06:00 [INF] Request finished in 33.2621ms 200 application/javascript
2020-03-08 17:19:20.977 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:20.983 +06:00 [INF] Request finished in 6.1045ms 200 font/woff2
2020-03-08 17:19:22.203 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued/default  
2020-03-08 17:19:22.948 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:23.110 +06:00 [INF] Request finished in 162.4166ms 200 application/json
2020-03-08 17:19:23.164 +06:00 [INF] Request finished in 960.9433ms 200 text/html
2020-03-08 17:19:23.273 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:23.283 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:23.286 +06:00 [INF] Request finished in 47.1828ms 200 text/css
2020-03-08 17:19:23.297 +06:00 [INF] Request finished in 13.1607ms 200 application/javascript
2020-03-08 17:19:23.390 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:23.396 +06:00 [INF] Request finished in 5.5145ms 200 font/woff2
2020-03-08 17:19:25.364 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:25.382 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 17:19:25.386 +06:00 [INF] Request finished in 21.6271ms 200 application/json
2020-03-08 17:19:25.421 +06:00 [INF] Request finished in 39.5419ms 200 text/html
2020-03-08 17:19:25.464 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:25.469 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:25.498 +06:00 [INF] Request finished in 33.6161ms 200 text/css
2020-03-08 17:19:25.499 +06:00 [INF] Request finished in 30.445ms 200 application/javascript
2020-03-08 17:19:25.614 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:25.628 +06:00 [INF] Request finished in 13.642ms 200 font/woff2
2020-03-08 17:19:26.981 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/details/6  
2020-03-08 17:19:27.009 +06:00 [INF] Request finished in 28.036ms 200 text/html
2020-03-08 17:19:27.045 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:19:27.045 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:19:27.056 +06:00 [INF] Request finished in 11.077ms 200 text/css
2020-03-08 17:19:27.057 +06:00 [INF] Request finished in 12.097ms 200 application/javascript
2020-03-08 17:19:27.219 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:19:27.222 +06:00 [INF] Request finished in 3.401ms 200 font/woff2
2020-03-08 17:19:29.178 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:29.190 +06:00 [INF] Request finished in 12.6062ms 200 application/json
2020-03-08 17:19:31.217 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:31.224 +06:00 [INF] Request finished in 6.9127ms 200 application/json
2020-03-08 17:19:33.251 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:33.257 +06:00 [INF] Request finished in 5.9911ms 200 application/json
2020-03-08 17:19:35.281 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:35.288 +06:00 [INF] Request finished in 6.7492ms 200 application/json
2020-03-08 17:19:37.297 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:37.314 +06:00 [INF] Request finished in 17.1326ms 200 application/json
2020-03-08 17:19:39.341 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:39.346 +06:00 [INF] Request finished in 5.0534ms 200 application/json
2020-03-08 17:19:41.378 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:41.385 +06:00 [INF] Request finished in 6.9471ms 200 application/json
2020-03-08 17:19:43.398 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:43.412 +06:00 [INF] Request finished in 14.4784ms 200 application/json
2020-03-08 17:19:45.420 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:45.437 +06:00 [INF] Request finished in 17.0229ms 200 application/json
2020-03-08 17:19:47.474 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:47.482 +06:00 [INF] Request finished in 7.7926ms 200 application/json
2020-03-08 17:19:49.489 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:49.496 +06:00 [INF] Request finished in 6.4564ms 200 application/json
2020-03-08 17:19:51.504 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:51.510 +06:00 [INF] Request finished in 6.0953ms 200 application/json
2020-03-08 17:19:53.519 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:53.526 +06:00 [INF] Request finished in 6.7322ms 200 application/json
2020-03-08 17:19:55.565 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:55.625 +06:00 [INF] Request finished in 59.7926ms 200 application/json
2020-03-08 17:19:57.653 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:57.681 +06:00 [INF] Request finished in 28.1993ms 200 application/json
2020-03-08 17:19:59.896 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:19:59.912 +06:00 [INF] Request finished in 15.339ms 200 application/json
2020-03-08 17:20:01.951 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:01.986 +06:00 [INF] Request finished in 35.5051ms 200 application/json
2020-03-08 17:20:03.996 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:04.003 +06:00 [INF] Request finished in 7.7224ms 200 application/json
2020-03-08 17:20:06.022 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:06.029 +06:00 [INF] Request finished in 6.1942ms 200 application/json
2020-03-08 17:20:08.044 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:08.076 +06:00 [INF] Request finished in 33.4433ms 200 application/json
2020-03-08 17:20:10.087 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:10.093 +06:00 [INF] Request finished in 6.0709ms 200 application/json
2020-03-08 17:20:12.102 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:12.123 +06:00 [INF] Request finished in 20.4347ms 200 application/json
2020-03-08 17:20:14.131 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:14.138 +06:00 [INF] Request finished in 7.0832ms 200 application/json
2020-03-08 17:20:16.146 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:16.152 +06:00 [INF] Request finished in 6.4661ms 200 application/json
2020-03-08 17:20:18.160 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:18.166 +06:00 [INF] Request finished in 6.1934ms 200 application/json
2020-03-08 17:20:20.175 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:20.182 +06:00 [INF] Request finished in 7.2756ms 200 application/json
2020-03-08 17:20:22.190 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:22.199 +06:00 [INF] Request finished in 8.6241ms 200 application/json
2020-03-08 17:20:24.210 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:24.216 +06:00 [INF] Request finished in 6.5765ms 200 application/json
2020-03-08 17:20:26.115 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/  
2020-03-08 17:20:26.125 +06:00 [INF] Request finished in 9.8141ms 200 text/html
2020-03-08 17:20:26.149 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:26.159 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:26.166 +06:00 [INF] Request finished in 16.8807ms 200 text/css
2020-03-08 17:20:26.172 +06:00 [INF] Request finished in 13.001ms 200 application/javascript
2020-03-08 17:20:26.375 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:26.377 +06:00 [INF] Request finished in 2.5221ms 200 font/woff2
2020-03-08 17:20:28.358 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 17:20:28.364 +06:00 [INF] Request finished in 5.6908ms 200 application/json
2020-03-08 17:20:30.380 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 17:20:30.387 +06:00 [INF] Request finished in 7.1478ms 200 application/json
2020-03-08 17:20:32.403 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 17:20:32.420 +06:00 [INF] Request finished in 17.6018ms 200 application/json
2020-03-08 17:20:34.444 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 17:20:34.451 +06:00 [INF] Request finished in 7.4948ms 200 application/json
2020-03-08 17:20:35.837 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 17:20:35.850 +06:00 [INF] Request finished in 12.7487ms 200 text/html
2020-03-08 17:20:35.882 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:35.885 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:35.893 +06:00 [INF] Request finished in 11.4053ms 200 text/css
2020-03-08 17:20:35.904 +06:00 [INF] Request finished in 19.2674ms 200 application/javascript
2020-03-08 17:20:36.001 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:36.006 +06:00 [INF] Request finished in 4.0955ms 200 font/woff2
2020-03-08 17:20:37.723 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 17:20:37.736 +06:00 [INF] Request finished in 13.1936ms 200 text/html
2020-03-08 17:20:37.771 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:37.782 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:37.792 +06:00 [INF] Request finished in 20.8248ms 200 text/css
2020-03-08 17:20:37.796 +06:00 [INF] Request finished in 13.4851ms 200 application/javascript
2020-03-08 17:20:37.887 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:37.892 +06:00 [INF] Request finished in 4.1626ms 200 font/woff2
2020-03-08 17:20:39.739 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 17:20:39.747 +06:00 [INF] Request finished in 8.2382ms 200 text/html
2020-03-08 17:20:39.773 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:39.775 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:39.788 +06:00 [INF] Request finished in 15.4571ms 200 text/css
2020-03-08 17:20:39.792 +06:00 [INF] Request finished in 19.1514ms 200 application/javascript
2020-03-08 17:20:39.897 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:39.902 +06:00 [INF] Request finished in 5.3699ms 200 font/woff2
2020-03-08 17:20:41.552 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/scheduled  
2020-03-08 17:20:41.587 +06:00 [INF] Request finished in 34.8165ms 200 text/html
2020-03-08 17:20:41.642 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:41.642 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:41.653 +06:00 [INF] Request finished in 11.2292ms 200 text/css
2020-03-08 17:20:41.657 +06:00 [INF] Request finished in 15.6165ms 200 application/javascript
2020-03-08 17:20:41.745 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:41.757 +06:00 [INF] Request finished in 12.2637ms 200 font/woff2
2020-03-08 17:20:43.530 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/succeeded  
2020-03-08 17:20:43.542 +06:00 [INF] Request finished in 12.4287ms 200 text/html
2020-03-08 17:20:43.606 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:43.629 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:43.640 +06:00 [INF] Request finished in 33.9456ms 200 text/css
2020-03-08 17:20:43.645 +06:00 [INF] Request finished in 29.5516ms 200 application/javascript
2020-03-08 17:20:43.722 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:43.726 +06:00 [INF] Request finished in 4.3756ms 200 font/woff2
2020-03-08 17:20:44.618 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/failed  
2020-03-08 17:20:44.630 +06:00 [INF] Request finished in 11.7214ms 200 text/html
2020-03-08 17:20:44.659 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:44.661 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:44.672 +06:00 [INF] Request finished in 13.7612ms 200 text/css
2020-03-08 17:20:44.677 +06:00 [INF] Request finished in 15.9493ms 200 application/javascript
2020-03-08 17:20:44.786 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:44.793 +06:00 [INF] Request finished in 6.7314ms 200 font/woff2
2020-03-08 17:20:46.004 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/deleted  
2020-03-08 17:20:46.020 +06:00 [INF] Request finished in 15.5782ms 200 text/html
2020-03-08 17:20:46.058 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:46.061 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:46.076 +06:00 [INF] Request finished in 17.1882ms 200 text/css
2020-03-08 17:20:46.079 +06:00 [INF] Request finished in 18.7219ms 200 application/javascript
2020-03-08 17:20:46.177 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:46.182 +06:00 [INF] Request finished in 5.5989ms 200 font/woff2
2020-03-08 17:20:48.156 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:48.163 +06:00 [INF] Request finished in 6.7274ms 200 application/json
2020-03-08 17:20:50.181 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:50.201 +06:00 [INF] Request finished in 20.0407ms 200 application/json
2020-03-08 17:20:50.485 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/details/5  
2020-03-08 17:20:50.524 +06:00 [INF] Request finished in 39.2871ms 200 text/html
2020-03-08 17:20:50.582 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:20:50.623 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:20:50.672 +06:00 [INF] Request finished in 49.3129ms 200 text/css
2020-03-08 17:20:50.679 +06:00 [INF] Request finished in 97.1094ms 200 application/javascript
2020-03-08 17:20:50.842 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:20:50.846 +06:00 [INF] Request finished in 4.0443ms 200 font/woff2
2020-03-08 17:20:52.821 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:52.837 +06:00 [INF] Request finished in 15.7462ms 200 application/json
2020-03-08 17:20:54.858 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:54.874 +06:00 [INF] Request finished in 15.982ms 200 application/json
2020-03-08 17:20:56.891 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:56.908 +06:00 [INF] Request finished in 17.6681ms 200 application/json
2020-03-08 17:20:58.924 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:20:58.934 +06:00 [INF] Request finished in 9.2624ms 200 application/json
2020-03-08 17:21:00.948 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:21:00.961 +06:00 [INF] Request finished in 13.3692ms 200 application/json
2020-03-08 17:21:02.972 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:21:02.987 +06:00 [INF] Request finished in 15.3424ms 200 application/json
2020-03-08 17:21:05.003 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:21:05.012 +06:00 [INF] Request finished in 8.307ms 200 application/json
2020-03-08 17:21:07.022 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:21:07.033 +06:00 [INF] Request finished in 11.2476ms 200 application/json
2020-03-08 17:21:09.048 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 17:21:09.062 +06:00 [INF] Request finished in 13.9642ms 200 application/json
2020-03-08 17:21:10.963 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 17:21:10.972 +06:00 [INF] Request finished in 9.3319ms 200 text/html
2020-03-08 17:21:11.000 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:21:10.996 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:21:11.038 +06:00 [INF] Request finished in 42.0869ms 200 text/css
2020-03-08 17:21:11.042 +06:00 [INF] Request finished in 45.3627ms 200 application/javascript
2020-03-08 17:21:11.202 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:21:11.217 +06:00 [INF] Request finished in 15.1593ms 200 font/woff2
2020-03-08 17:21:12.966 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/details/6  
2020-03-08 17:21:12.973 +06:00 [INF] Request finished in 7.4207ms 200 text/html
2020-03-08 17:21:13.007 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 17:21:13.007 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 17:21:13.018 +06:00 [INF] Request finished in 10.7753ms 200 text/css
2020-03-08 17:21:13.023 +06:00 [INF] Request finished in 16.4884ms 200 application/javascript
2020-03-08 17:21:13.154 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 17:21:13.157 +06:00 [INF] Request finished in 2.9278ms 200 font/woff2
2020-03-08 17:37:13.271 +06:00 [INF] Starting web host
2020-03-08 17:37:14.776 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 17:37:15.238 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 17:37:15.286 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 17:37:15.438 +06:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:37:15.459 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:37:15.487 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:37:15.489 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:37:15.502 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:37:15.504 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:37:15.538 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:37:15.541 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:37:15.567 +06:00 [WRN] User 4d655977-dfe2-4968-a858-bb639cb6dc52 validation failed: DuplicateUserName.
2020-03-08 17:37:15.569 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:37:15.572 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:37:15.584 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:37:15.587 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:37:15.589 +06:00 [WRN] User b439285e-323f-4802-8eb3-4b7352f72718 validation failed: DuplicateUserName.
2020-03-08 17:37:15.688 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 17:37:15.738 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 17:37:16.089 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 17:37:16.091 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 17:37:16.116 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 17:37:16.220 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 17:37:16.284 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 17:37:16.292 +06:00 [INF] Server desktop-pcju7lj:1424:2e5b6163 successfully announced in 163.0787 ms
2020-03-08 17:37:16.312 +06:00 [INF] Server desktop-pcju7lj:1424:2e5b6163 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 17:37:16.384 +06:00 [INF] 3 servers were removed due to timeout
2020-03-08 17:37:16.493 +06:00 [INF] Server desktop-pcju7lj:1424:2e5b6163 all the dispatchers started
2020-03-08 17:37:16.496 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 17:37:23.668 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 17:37:23.675 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 17:37:23.677 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 17:37:23.816 +06:00 [INF] Executed page /Index in 7527.8381ms
2020-03-08 17:37:23.819 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 17:37:23.827 +06:00 [INF] Request finished in 7712.2544ms 200 text/html; charset=utf-8
2020-03-08 17:42:33.572 +06:00 [INF] Starting web host
2020-03-08 17:42:35.071 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 17:42:35.522 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 17:42:35.572 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 17:42:35.754 +06:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:42:35.773 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:42:35.801 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:42:35.803 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:42:35.818 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:42:35.820 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:42:35.857 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:42:35.859 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:42:35.881 +06:00 [WRN] User b03d55a7-c854-450f-bba6-f2418e4f77f1 validation failed: DuplicateUserName.
2020-03-08 17:42:35.884 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:42:35.887 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:42:35.896 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:42:35.898 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:42:35.900 +06:00 [WRN] User ff5db01d-87d9-416c-9849-cd4634e12932 validation failed: DuplicateUserName.
2020-03-08 17:42:35.943 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 17:42:35.989 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 17:42:36.321 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 17:42:36.323 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 17:42:36.343 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 17:42:36.416 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 17:42:36.487 +06:00 [INF] Server desktop-pcju7lj:7404:94318547 successfully announced in 132.5658 ms
2020-03-08 17:42:36.526 +06:00 [INF] Server desktop-pcju7lj:7404:94318547 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 17:42:36.536 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 17:42:36.571 +06:00 [INF] 1 servers were removed due to timeout
2020-03-08 17:42:36.736 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 17:42:36.783 +06:00 [INF] Server desktop-pcju7lj:7404:94318547 all the dispatchers started
2020-03-08 17:42:37.378 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 17:42:37.385 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 17:42:37.389 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 17:42:37.618 +06:00 [INF] Executed page /Index in 1077.2563ms
2020-03-08 17:42:37.625 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 17:42:37.642 +06:00 [INF] Request finished in 1299.008ms 200 text/html; charset=utf-8
2020-03-08 17:46:27.256 +06:00 [INF] Starting web host
2020-03-08 17:46:28.673 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 17:46:29.169 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 17:46:29.221 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 17:46:29.388 +06:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:46:29.408 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:46:29.437 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:46:29.439 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 17:46:29.453 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:46:29.457 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:46:29.491 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:46:29.494 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:46:29.518 +06:00 [WRN] User 034b2341-85c5-4350-8c49-283cbfad900b validation failed: DuplicateUserName.
2020-03-08 17:46:29.521 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:46:29.524 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:46:29.534 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 17:46:29.537 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 17:46:29.539 +06:00 [WRN] User d847b4c2-9759-453a-9157-464235832fe5 validation failed: DuplicateUserName.
2020-03-08 17:46:29.588 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 17:46:29.638 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 17:46:30.011 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 17:46:30.013 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 17:46:30.036 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 17:46:30.125 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 17:46:30.206 +06:00 [INF] Server desktop-pcju7lj:23752:7b55b071 successfully announced in 155.7177 ms
2020-03-08 17:46:30.223 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 17:46:30.225 +06:00 [INF] Server desktop-pcju7lj:23752:7b55b071 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 17:46:30.298 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 17:46:31.293 +06:00 [INF] Server desktop-pcju7lj:23752:7b55b071 all the dispatchers started
2020-03-08 17:46:31.623 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 17:46:31.629 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 17:46:31.636 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 17:46:31.947 +06:00 [INF] Executed page /Index in 1716.9832000000001ms
2020-03-08 17:46:31.954 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 17:46:31.962 +06:00 [INF] Request finished in 1935.2869ms 200 text/html; charset=utf-8
2020-03-08 18:07:58.544 +06:00 [INF] Starting web host
2020-03-08 18:08:00.070 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:08:00.559 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:08:00.609 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:08:01.195 +06:00 [ERR] An exception occurred while iterating over the results of a query for context type 'ThreeS.Routine.Data.ApplicationDbContext'.
System.ArgumentException: Keyword not supported: 'version'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
System.ArgumentException: Keyword not supported: 'version'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
2020-03-08 18:08:01.202 +06:00 [ERR] An exception occurred while iterating over the results of a query for context type 'ThreeS.Routine.Data.ApplicationDbContext'.
System.ArgumentException: Keyword not supported: 'version'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteSingletonAsyncQuery[TResult](QueryContext queryContext, Func`2 compiledQuery, IDiagnosticsLogger`1 logger, Type contextType)
System.ArgumentException: Keyword not supported: 'version'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteSingletonAsyncQuery[TResult](QueryContext queryContext, Func`2 compiledQuery, IDiagnosticsLogger`1 logger, Type contextType)
2020-03-08 18:08:34.315 +06:00 [INF] Starting web host
2020-03-08 18:08:35.510 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:08:35.960 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:08:36.007 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:08:36.485 +06:00 [ERR] An exception occurred while iterating over the results of a query for context type 'ThreeS.Routine.Data.ApplicationDbContext'.
System.ArgumentException: Keyword not supported: 'pooling'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
System.ArgumentException: Keyword not supported: 'pooling'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
2020-03-08 18:08:36.495 +06:00 [ERR] An exception occurred while iterating over the results of a query for context type 'ThreeS.Routine.Data.ApplicationDbContext'.
System.ArgumentException: Keyword not supported: 'pooling'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteSingletonAsyncQuery[TResult](QueryContext queryContext, Func`2 compiledQuery, IDiagnosticsLogger`1 logger, Type contextType)
System.ArgumentException: Keyword not supported: 'pooling'.
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.GetIndex(String keyword)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder.set_Item(String keyword, Object value)
   at System.Data.Common.DbConnectionStringBuilder.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnectionStringBuilder..ctor(String connectionString)
   at Microsoft.Data.Sqlite.SqliteConnection.set_ConnectionString(String value)
   at Microsoft.Data.Sqlite.SqliteConnection..ctor(String connectionString)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.CreateDbConnection()
   at Microsoft.EntityFrameworkCore.Internal.LazyRef`1.get_Value()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.get_DbConnection()
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal.SqliteRelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.FirstOrDefault_[TSource](IAsyncEnumerable`1 source, CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\First.cs:line 144
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at System.Linq.AsyncEnumerable.SelectEnumerableAsyncIterator`2.MoveNextCore(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\Select.cs:line 106
   at System.Linq.AsyncEnumerable.AsyncIterator`1.MoveNext(CancellationToken cancellationToken) in D:\a\1\s\Ix.NET\Source\System.Interactive.Async\AsyncIterator.cs:line 98
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteSingletonAsyncQuery[TResult](QueryContext queryContext, Func`2 compiledQuery, IDiagnosticsLogger`1 logger, Type contextType)
2020-03-08 18:08:58.459 +06:00 [INF] Starting web host
2020-03-08 18:08:59.813 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:09:00.300 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:09:00.348 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:09:00.503 +06:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:09:00.524 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:09:00.552 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:09:00.555 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:09:00.568 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:09:00.571 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:09:00.606 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:09:00.609 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:09:00.637 +06:00 [WRN] User 60ac8978-b2cb-49de-8c62-ca4a50f13ed0 validation failed: DuplicateUserName.
2020-03-08 18:09:00.639 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:09:00.641 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:09:00.651 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:09:00.653 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:09:00.655 +06:00 [WRN] User 19641956-aa22-428c-9459-e38230e13cf9 validation failed: DuplicateUserName.
2020-03-08 18:09:00.759 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 18:09:00.809 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 18:09:01.266 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 18:09:01.271 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 20
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 18:09:01.286 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 18:09:01.372 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 18:09:01.438 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 18:09:01.453 +06:00 [INF] Server desktop-pcju7lj:3352:96848d29 successfully announced in 127.2629 ms
2020-03-08 18:09:01.469 +06:00 [INF] Server desktop-pcju7lj:3352:96848d29 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 18:09:01.514 +06:00 [INF] 2 servers were removed due to timeout
2020-03-08 18:09:01.558 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 18:09:01.638 +06:00 [INF] Server desktop-pcju7lj:3352:96848d29 all the dispatchers started
2020-03-08 18:09:19.561 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 18:09:19.567 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 18:09:19.571 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 18:17:57.780 +06:00 [INF] Starting web host
2020-03-08 18:17:59.052 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:17:59.535 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:17:59.582 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:17:59.733 +06:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:17:59.753 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:17:59.780 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:17:59.782 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:17:59.795 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:17:59.797 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:17:59.829 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:17:59.832 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:17:59.859 +06:00 [WRN] User f1fb4692-f671-4213-b170-9635e2906ec7 validation failed: DuplicateUserName.
2020-03-08 18:17:59.861 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:17:59.863 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:17:59.874 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:17:59.876 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:17:59.878 +06:00 [WRN] User 8307c615-502b-45be-bce1-9a39ed57603c validation failed: DuplicateUserName.
2020-03-08 18:17:59.928 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 18:17:59.975 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 18:17:59.994 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 18:17:59.995 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 18:18:00.286 +06:00 [INF] Server tasksvchangfireserver:25760:18893fb5 successfully announced in 258.8589 ms
2020-03-08 18:18:00.303 +06:00 [INF] Server tasksvchangfireserver:25760:18893fb5 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 18:18:00.366 +06:00 [INF] Server tasksvchangfireserver:25760:18893fb5 all the dispatchers started
2020-03-08 18:18:00.385 +06:00 [INF] 1 servers were removed due to timeout
2020-03-08 18:18:00.535 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 18:18:00.586 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 18:18:00.639 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 18:18:05.728 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 18:18:05.817 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 18:18:05.821 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 18:18:05.822 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 18:18:05.971 +06:00 [INF] Executed page /Index in 5322.4038ms
2020-03-08 18:18:05.973 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 18:18:05.982 +06:00 [INF] Request finished in 5449.1518ms 200 text/html; charset=utf-8
2020-03-08 18:21:20.348 +06:00 [INF] Starting web host
2020-03-08 18:21:21.731 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:21:22.205 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:21:22.253 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:21:22.418 +06:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:21:22.439 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:21:22.469 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:21:22.472 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:21:22.485 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:21:22.488 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:21:22.525 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:21:22.530 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:21:22.555 +06:00 [WRN] User 819a483c-de53-4802-aedf-dd0f7814339b validation failed: DuplicateUserName.
2020-03-08 18:21:22.559 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:21:22.562 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:21:22.571 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:21:22.573 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:21:22.576 +06:00 [WRN] User b1e7b9ca-6bfa-4237-80d4-a08ed31164cc validation failed: DuplicateUserName.
2020-03-08 18:21:22.626 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 18:21:22.672 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 18:21:22.691 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 18:21:22.694 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 18:21:22.910 +06:00 [INF] Server tasksvchangfireserver:20772:4278c5a1 successfully announced in 181.2224 ms
2020-03-08 18:21:22.921 +06:00 [INF] Server tasksvchangfireserver:20772:4278c5a1 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 18:21:22.973 +06:00 [INF] Server tasksvchangfireserver:20772:4278c5a1 all the dispatchers started
2020-03-08 18:21:33.443 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 18:21:33.515 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 18:21:33.573 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 18:21:33.590 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 18:21:33.675 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 18:21:33.679 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 18:21:33.681 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 18:21:33.823 +06:00 [INF] Executed page /Index in 245.77120000000002ms
2020-03-08 18:21:33.825 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 18:21:33.832 +06:00 [INF] Request finished in 389.7024ms 200 text/html; charset=utf-8
2020-03-08 18:23:00.843 +06:00 [INF] Starting web host
2020-03-08 18:23:02.263 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:23:02.721 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:23:02.770 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:23:02.927 +06:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:23:02.948 +06:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:23:02.975 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:23:02.978 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:23:02.989 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:23:02.992 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:23:03.025 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:23:03.028 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:23:03.055 +06:00 [WRN] User 1407da04-72d5-49d4-9a21-2ab40c89775b validation failed: DuplicateUserName.
2020-03-08 18:23:03.059 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:23:03.061 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:23:03.071 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:23:03.073 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:23:03.077 +06:00 [WRN] User 774f92e2-c0fa-4cca-91a8-5a85da8f2366 validation failed: DuplicateUserName.
2020-03-08 18:23:03.128 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 18:23:03.199 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 18:23:03.217 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 18:23:03.219 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 18:23:03.476 +06:00 [INF] Server tasksvchangfireserver:11780:bfbec3ae successfully announced in 227.0342 ms
2020-03-08 18:23:03.523 +06:00 [INF] Server tasksvchangfireserver:11780:bfbec3ae is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 18:23:03.586 +06:00 [INF] 1 servers were removed due to timeout
2020-03-08 18:23:03.590 +06:00 [INF] Server tasksvchangfireserver:11780:bfbec3ae all the dispatchers started
2020-03-08 18:23:07.543 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 18:23:07.603 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 18:23:07.657 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 18:23:07.673 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 18:23:07.758 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 18:23:07.762 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 18:23:07.764 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 18:23:07.906 +06:00 [INF] Executed page /Index in 244.45170000000002ms
2020-03-08 18:23:07.908 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 18:23:07.915 +06:00 [INF] Request finished in 372.3683ms 200 text/html; charset=utf-8
2020-03-08 18:24:07.798 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs  
2020-03-08 18:34:32.727 +06:00 [INF] Starting web host
2020-03-08 18:34:34.078 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 18:34:34.580 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 18:34:34.632 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 18:34:34.777 +06:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:34:34.801 +06:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:34:34.827 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:34:34.829 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 18:34:34.841 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:34:34.844 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:34:34.875 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:34:34.877 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:34:34.901 +06:00 [WRN] User b476988f-8a2c-452d-8e87-d4d7ce6a98bf validation failed: DuplicateUserName.
2020-03-08 18:34:34.903 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:34:34.906 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:34:34.915 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 18:34:34.918 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 18:34:34.920 +06:00 [WRN] User a55398fe-13f8-451d-a6a1-97057f2de0e5 validation failed: DuplicateUserName.
2020-03-08 18:34:34.969 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 18:34:35.022 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 18:34:35.039 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 18:34:35.041 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 18:34:35.235 +06:00 [INF] Server tasksvchangfireserver:2780:93bd402f successfully announced in 165.9034 ms
2020-03-08 18:34:35.259 +06:00 [INF] Server tasksvchangfireserver:2780:93bd402f is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 18:34:35.337 +06:00 [INF] 2 servers were removed due to timeout
2020-03-08 18:34:35.356 +06:00 [INF] Server tasksvchangfireserver:2780:93bd402f all the dispatchers started
2020-03-08 18:34:35.519 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 18:34:35.578 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 18:34:35.664 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 18:34:35.682 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 18:34:35.764 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 18:34:35.767 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 18:34:35.769 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 18:34:35.915 +06:00 [INF] Executed page /Index in 247.56130000000002ms
2020-03-08 18:34:35.917 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 18:34:35.924 +06:00 [INF] Request finished in 406.3405ms 200 text/html; charset=utf-8
2020-03-08 18:34:35.990 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/lib/jquery/dist/jquery.js  
2020-03-08 18:34:35.991 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/js/site.js?v=dLGP40S79Xnx6GqUthRF6NWvjvhQ1nOvdVSwaNcgG18  
2020-03-08 18:34:35.992 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/lib/bootstrap/dist/js/bootstrap.bundle.js  
2020-03-08 18:34:36.015 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/lib/bootstrap/dist/css/bootstrap.css  
2020-03-08 18:34:36.016 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/css/site.css  
2020-03-08 18:34:36.022 +06:00 [INF] The file /js/site.js was not modified
2020-03-08 18:34:36.022 +06:00 [INF] The file /lib/jquery/dist/jquery.js was not modified
2020-03-08 18:34:36.022 +06:00 [INF] The file /css/site.css was not modified
2020-03-08 18:34:36.022 +06:00 [INF] The file /lib/bootstrap/dist/css/bootstrap.css was not modified
2020-03-08 18:34:36.022 +06:00 [INF] The file /lib/bootstrap/dist/js/bootstrap.bundle.js was not modified
2020-03-08 18:34:36.031 +06:00 [INF] Request finished in 40.4203ms 304 application/javascript
2020-03-08 18:34:36.031 +06:00 [INF] Request finished in 41.5817ms 304 application/javascript
2020-03-08 18:34:36.031 +06:00 [INF] Request finished in 16.1521ms 304 text/css
2020-03-08 18:34:36.031 +06:00 [INF] Request finished in 39.5242ms 304 application/javascript
2020-03-08 18:34:36.032 +06:00 [INF] Request finished in 16.3517ms 304 text/css
2020-03-08 19:13:47.213 +06:00 [INF] Starting web host
2020-03-08 19:13:48.617 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 19:13:49.099 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 19:13:49.150 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 19:13:49.317 +06:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:13:49.350 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:13:49.391 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:13:49.394 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:13:49.407 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:13:49.411 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:13:49.446 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:13:49.447 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:13:49.473 +06:00 [WRN] User 91331614-1198-4d1b-92ee-3237845ac9b2 validation failed: DuplicateUserName.
2020-03-08 19:13:49.475 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:13:49.477 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:13:49.486 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:13:49.489 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:13:49.490 +06:00 [WRN] User 2d436e90-b2cf-4ba7-9e2b-7baddb0f992e validation failed: DuplicateUserName.
2020-03-08 19:13:49.539 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 19:13:49.587 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 19:13:49.613 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 19:13:49.615 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 19:13:49.867 +06:00 [INF] Server tasksvchangfireserver:21512:e23c87d8 successfully announced in 209.1001 ms
2020-03-08 19:13:49.915 +06:00 [INF] Server tasksvchangfireserver:21512:e23c87d8 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 19:13:49.977 +06:00 [INF] 1 servers were removed due to timeout
2020-03-08 19:13:49.993 +06:00 [INF] Server tasksvchangfireserver:21512:e23c87d8 all the dispatchers started
2020-03-08 19:13:50.319 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 19:13:50.464 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 19:13:50.529 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 19:13:50.549 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 19:13:50.690 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 19:13:50.694 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 19:13:50.697 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 19:13:50.883 +06:00 [INF] Executed page /Index in 347.8729ms
2020-03-08 19:13:50.894 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 19:13:50.909 +06:00 [INF] Request finished in 591.1803ms 200 text/html; charset=utf-8
2020-03-08 19:13:57.834 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs  
2020-03-08 19:13:57.973 +06:00 [INF] Request finished in 138.9585ms 200 text/html
2020-03-08 19:13:58.021 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:13:58.021 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:13:58.060 +06:00 [INF] Request finished in 38.7952ms 200 text/css
2020-03-08 19:13:58.060 +06:00 [INF] Request finished in 38.8333ms 200 application/javascript
2020-03-08 19:13:58.233 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:13:58.236 +06:00 [INF] Request finished in 2.4832ms 200 font/woff2
2020-03-08 19:14:00.212 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 19:14:00.243 +06:00 [INF] Request finished in 31.1521ms 200 application/json
2020-03-08 19:14:00.841 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 19:14:00.881 +06:00 [INF] Request finished in 39.9881ms 200 text/html
2020-03-08 19:14:00.918 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:00.920 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:00.927 +06:00 [INF] Request finished in 8.8589ms 200 text/css
2020-03-08 19:14:00.934 +06:00 [INF] Request finished in 14.1073ms 200 application/javascript
2020-03-08 19:14:01.089 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:01.092 +06:00 [INF] Request finished in 2.7382ms 200 font/woff2
2020-03-08 19:14:03.046 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:03.053 +06:00 [INF] Request finished in 6.3696ms 200 application/json
2020-03-08 19:14:05.061 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:05.065 +06:00 [INF] Request finished in 4.6782ms 200 application/json
2020-03-08 19:14:07.073 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:07.077 +06:00 [INF] Request finished in 4.1272ms 200 application/json
2020-03-08 19:14:09.088 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:09.093 +06:00 [INF] Request finished in 5.868ms 200 application/json
2020-03-08 19:14:10.447 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/servers  
2020-03-08 19:14:10.460 +06:00 [INF] Request finished in 12.5845ms 200 text/html
2020-03-08 19:14:10.494 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:10.496 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:10.501 +06:00 [INF] Request finished in 7.0103ms 200 text/css
2020-03-08 19:14:10.504 +06:00 [INF] Request finished in 8.7589ms 200 application/javascript
2020-03-08 19:14:10.739 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:10.743 +06:00 [INF] Request finished in 3.8292ms 200 font/woff2
2020-03-08 19:14:12.590 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:12.596 +06:00 [INF] Request finished in 5.2084ms 200 application/json
2020-03-08 19:14:14.604 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:14.609 +06:00 [INF] Request finished in 5.6339ms 200 application/json
2020-03-08 19:14:16.617 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:16.622 +06:00 [INF] Request finished in 4.8914ms 200 application/json
2020-03-08 19:14:26.753 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:26.805 +06:00 [INF] Request finished in 52.2346ms 200 application/json
2020-03-08 19:14:28.817 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:28.823 +06:00 [INF] Request finished in 6.0238ms 200 application/json
2020-03-08 19:14:29.888 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 19:14:29.933 +06:00 [INF] Request finished in 45.8528ms 200 text/html
2020-03-08 19:14:29.964 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:29.968 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:29.980 +06:00 [INF] Request finished in 12.2972ms 200 application/javascript
2020-03-08 19:14:29.980 +06:00 [INF] Request finished in 16.2721ms 200 text/css
2020-03-08 19:14:30.156 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:30.158 +06:00 [INF] Request finished in 2.5557ms 200 font/woff2
2020-03-08 19:14:32.072 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:14:32.082 +06:00 [INF] Request finished in 10.1789ms 200 application/json
2020-03-08 19:14:32.127 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 19:14:32.145 +06:00 [INF] Request finished in 18.3914ms 200 text/html
2020-03-08 19:14:32.184 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:32.185 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:32.192 +06:00 [INF] Request finished in 7.79ms 200 text/css
2020-03-08 19:14:32.195 +06:00 [INF] Request finished in 11.3536ms 200 application/javascript
2020-03-08 19:14:32.365 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:32.368 +06:00 [INF] Request finished in 2.9631ms 200 font/woff2
2020-03-08 19:14:34.290 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:14:34.296 +06:00 [INF] Request finished in 5.9595ms 200 application/json
2020-03-08 19:14:35.579 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/jobs/processing/delete application/x-www-form-urlencoded; charset=UTF-8 12
2020-03-08 19:14:35.614 +06:00 [INF] Request finished in 35.3351ms 204 
2020-03-08 19:14:35.623 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 19:14:35.634 +06:00 [INF] Request finished in 10.0684ms 200 text/html
2020-03-08 19:14:35.673 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:35.675 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:35.687 +06:00 [INF] Request finished in 13.601ms 200 text/css
2020-03-08 19:14:35.690 +06:00 [INF] Request finished in 15.5059ms 200 application/javascript
2020-03-08 19:14:35.857 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:35.861 +06:00 [INF] Request finished in 4.4105ms 200 font/woff2
2020-03-08 19:14:37.641 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 19:14:37.649 +06:00 [INF] Request finished in 8.0542ms 200 text/html
2020-03-08 19:14:37.677 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:37.677 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:37.704 +06:00 [INF] Request finished in 27.0423ms 200 text/css
2020-03-08 19:14:37.707 +06:00 [INF] Request finished in 30.7571ms 200 application/javascript
2020-03-08 19:14:37.813 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:37.816 +06:00 [INF] Request finished in 3.1919ms 200 font/woff2
2020-03-08 19:14:39.783 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:14:39.789 +06:00 [INF] Request finished in 6.8377ms 200 application/json
2020-03-08 19:14:41.800 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:14:41.816 +06:00 [INF] Request finished in 16.2971ms 200 application/json
2020-03-08 19:14:41.943 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued/default  
2020-03-08 19:14:41.957 +06:00 [INF] Request finished in 13.3518ms 200 text/html
2020-03-08 19:14:41.996 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:42.001 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:42.037 +06:00 [INF] Request finished in 41.3191ms 200 text/css
2020-03-08 19:14:42.053 +06:00 [INF] Request finished in 52.7182ms 200 application/javascript
2020-03-08 19:14:42.134 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:42.140 +06:00 [INF] Request finished in 5.412ms 200 font/woff2
2020-03-08 19:14:44.115 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:14:44.123 +06:00 [INF] Request finished in 8.3187ms 200 application/json
2020-03-08 19:14:44.375 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 19:14:44.394 +06:00 [INF] Request finished in 18.9059ms 200 text/html
2020-03-08 19:14:44.499 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:14:44.503 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:14:44.514 +06:00 [INF] Request finished in 15.2758ms 200 text/css
2020-03-08 19:14:44.521 +06:00 [INF] Request finished in 17.4764ms 200 application/javascript
2020-03-08 19:14:44.619 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:14:44.631 +06:00 [INF] Request finished in 12.3735ms 200 font/woff2
2020-03-08 19:14:46.603 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:46.618 +06:00 [INF] Request finished in 14.9127ms 200 application/json
2020-03-08 19:14:48.631 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:48.639 +06:00 [INF] Request finished in 7.3228ms 200 application/json
2020-03-08 19:14:50.659 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:50.676 +06:00 [INF] Request finished in 17.9023ms 200 application/json
2020-03-08 19:14:52.688 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:52.694 +06:00 [INF] Request finished in 5.2022ms 200 application/json
2020-03-08 19:14:54.705 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:54.713 +06:00 [INF] Request finished in 8.2964ms 200 application/json
2020-03-08 19:14:56.726 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:56.735 +06:00 [INF] Request finished in 9.2436ms 200 application/json
2020-03-08 19:14:58.927 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:14:58.931 +06:00 [INF] Request finished in 4.8571ms 200 application/json
2020-03-08 19:15:00.945 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:15:00.951 +06:00 [INF] Request finished in 5.6153ms 200 application/json
2020-03-08 19:15:02.959 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:15:02.965 +06:00 [INF] Request finished in 5.9628ms 200 application/json
2020-03-08 19:15:04.974 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:15:04.980 +06:00 [INF] Request finished in 6.3251ms 200 application/json
2020-03-08 19:15:06.989 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:15:06.994 +06:00 [INF] Request finished in 5.3768ms 200 application/json
2020-03-08 19:16:13.508 +06:00 [INF] Starting web host
2020-03-08 19:16:14.792 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 19:16:15.367 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 19:16:15.425 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 19:16:15.601 +06:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:16:15.621 +06:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:16:15.651 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:16:15.656 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:16:15.669 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:16:15.671 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:16:15.707 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:16:15.709 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:16:15.740 +06:00 [WRN] User 77e14593-fbcf-427c-9294-c16829c21fdb validation failed: DuplicateUserName.
2020-03-08 19:16:15.742 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:16:15.744 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:16:15.755 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:16:15.758 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:16:15.760 +06:00 [WRN] User 1b9e7cd6-9636-45c0-a57f-4d6b4c6db49e validation failed: DuplicateUserName.
2020-03-08 19:16:15.826 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 19:16:15.940 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 19:16:15.960 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 19:16:15.961 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 19:16:16.241 +06:00 [INF] Server tasksvchangfireserver:22864:36b0dfc0 successfully announced in 213.9403 ms
2020-03-08 19:16:16.268 +06:00 [INF] Server tasksvchangfireserver:22864:36b0dfc0 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 19:16:16.364 +06:00 [INF] Server tasksvchangfireserver:22864:36b0dfc0 all the dispatchers started
2020-03-08 19:16:16.560 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 19:16:16.614 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 19:16:16.663 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 19:16:16.690 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 19:16:16.815 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 19:16:16.825 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 19:16:16.833 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 19:16:16.992 +06:00 [INF] Executed page /Index in 326.2101ms
2020-03-08 19:16:16.994 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 19:16:17.001 +06:00 [INF] Request finished in 440.7167ms 200 text/html; charset=utf-8
2020-03-08 19:17:44.956 +06:00 [INF] Starting web host
2020-03-08 19:17:46.296 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 19:17:46.757 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 19:17:46.812 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 19:17:46.961 +06:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:17:46.982 +06:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:17:47.014 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:17:47.017 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:17:47.029 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:17:47.032 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:17:47.066 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:17:47.068 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:17:47.093 +06:00 [WRN] User 1f313c02-8163-4cba-836a-a3cc2bf85b91 validation failed: DuplicateUserName.
2020-03-08 19:17:47.095 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:17:47.097 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:17:47.106 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:17:47.110 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:17:47.112 +06:00 [WRN] User fc38aa9c-1237-4db9-a1a3-75140f7c5a5e validation failed: DuplicateUserName.
2020-03-08 19:17:47.164 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 19:17:47.222 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 19:17:47.250 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 19:17:47.265 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 19:17:47.476 +06:00 [INF] Server tasksvchangfireserver:10888:deb84b99 successfully announced in 171.2154 ms
2020-03-08 19:17:47.495 +06:00 [INF] Server tasksvchangfireserver:10888:deb84b99 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 19:17:47.537 +06:00 [INF] Server tasksvchangfireserver:10888:deb84b99 all the dispatchers started
2020-03-08 19:17:47.750 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 19:17:47.812 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 19:17:47.864 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 19:17:47.894 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 19:17:48.018 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 19:17:48.021 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 19:17:48.023 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 19:17:48.186 +06:00 [INF] Executed page /Index in 315.2493ms
2020-03-08 19:17:48.190 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 19:17:48.202 +06:00 [INF] Request finished in 453.1247ms 200 text/html; charset=utf-8
2020-03-08 19:17:52.770 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/Index  
2020-03-08 19:17:52.776 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 19:17:52.791 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 19:17:52.794 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 19:17:52.861 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 19:17:52.864 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 19:17:52.867 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 19:17:52.871 +06:00 [INF] Executed page /Index in 77.310600000000008ms
2020-03-08 19:17:52.874 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 19:17:52.877 +06:00 [INF] Request finished in 106.4178ms 200 text/html; charset=utf-8
2020-03-08 19:18:00.142 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/lib/bootstrap/dist/js/bootstrap.bundle.js.map  
2020-03-08 19:18:00.156 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/lib/bootstrap/dist/css/bootstrap.css.map  
2020-03-08 19:18:00.187 +06:00 [INF] Sending file. Request path: '/lib/bootstrap/dist/css/bootstrap.css.map'. Physical path: 'C:\Users\Emon\source\repos\WorkerService1\ThreeS.Routine\wwwroot\lib\bootstrap\dist\css\bootstrap.css.map'
2020-03-08 19:18:00.187 +06:00 [INF] Sending file. Request path: '/lib/bootstrap/dist/js/bootstrap.bundle.js.map'. Physical path: 'C:\Users\Emon\source\repos\WorkerService1\ThreeS.Routine\wwwroot\lib\bootstrap\dist\js\bootstrap.bundle.js.map'
2020-03-08 19:18:00.196 +06:00 [INF] Request finished in 40.0832ms 200 text/plain
2020-03-08 19:18:00.196 +06:00 [INF] Request finished in 54.3301ms 200 text/plain
2020-03-08 19:18:26.940 +06:00 [INF] Starting web host
2020-03-08 19:18:28.301 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 19:18:28.773 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 19:18:28.833 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 19:18:28.976 +06:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:18:29.012 +06:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:18:29.039 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:18:29.042 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:18:29.053 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:18:29.056 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:18:29.089 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:18:29.092 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:18:29.118 +06:00 [WRN] User b15ab168-3074-4913-ae11-afccd03d9768 validation failed: DuplicateUserName.
2020-03-08 19:18:29.120 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:18:29.122 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:18:29.132 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:18:29.135 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:18:29.137 +06:00 [WRN] User d5971c51-1af0-46ce-af5e-c92cac00b8aa validation failed: DuplicateUserName.
2020-03-08 19:18:29.189 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 19:18:29.241 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 19:18:29.259 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 19:18:29.261 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 19:18:29.496 +06:00 [INF] Server tasksvchangfireserver:8004:b334494c successfully announced in 197.9907 ms
2020-03-08 19:18:29.509 +06:00 [INF] Server tasksvchangfireserver:8004:b334494c is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 19:18:29.565 +06:00 [INF] Server tasksvchangfireserver:8004:b334494c all the dispatchers started
2020-03-08 19:18:29.859 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 19:18:29.928 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 19:18:29.982 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 19:18:30.017 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 19:18:30.163 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 19:18:30.166 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 19:18:30.169 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 19:18:30.328 +06:00 [INF] Executed page /Index in 340.8306ms
2020-03-08 19:18:30.330 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 19:18:30.344 +06:00 [INF] Request finished in 484.4051ms 200 text/html; charset=utf-8
2020-03-08 19:18:33.713 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs  
2020-03-08 19:18:33.808 +06:00 [INF] Request finished in 94.4803ms 200 text/html
2020-03-08 19:18:33.836 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:33.841 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:33.879 +06:00 [INF] Request finished in 43.1094ms 200 text/css
2020-03-08 19:18:33.879 +06:00 [INF] Request finished in 38.5133ms 200 application/javascript
2020-03-08 19:18:34.070 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:34.074 +06:00 [INF] Request finished in 4.1169ms 200 font/woff2
2020-03-08 19:18:36.036 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 19:18:36.083 +06:00 [INF] Request finished in 46.6508ms 200 application/json
2020-03-08 19:18:38.099 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 19:18:38.107 +06:00 [INF] Request finished in 7.8755ms 200 application/json
2020-03-08 19:18:39.969 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 19:18:40.006 +06:00 [INF] Request finished in 36.7222ms 200 text/html
2020-03-08 19:18:40.033 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:40.035 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:40.046 +06:00 [INF] Request finished in 13.4508ms 200 text/css
2020-03-08 19:18:40.051 +06:00 [INF] Request finished in 15.9254ms 200 application/javascript
2020-03-08 19:18:40.204 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:40.205 +06:00 [INF] Request finished in 1.8324ms 200 font/woff2
2020-03-08 19:18:42.165 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:18:42.171 +06:00 [INF] Request finished in 5.1562ms 200 application/json
2020-03-08 19:18:44.179 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 167
2020-03-08 19:18:44.185 +06:00 [INF] Request finished in 6.8511ms 200 application/json
2020-03-08 19:18:44.859 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/recurring/trigger application/x-www-form-urlencoded; charset=UTF-8 37
2020-03-08 19:18:44.977 +06:00 [INF] Request finished in 118.3446ms 204 
2020-03-08 19:18:44.989 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/recurring  
2020-03-08 19:18:45.069 +06:00 [INF] Request finished in 80.23ms 200 text/html
2020-03-08 19:18:45.101 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:45.102 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:45.113 +06:00 [INF] Request finished in 12.08ms 200 text/css
2020-03-08 19:18:45.121 +06:00 [INF] Request finished in 20.4409ms 200 application/javascript
2020-03-08 19:18:45.253 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:45.256 +06:00 [INF] Request finished in 2.6672ms 200 font/woff2
2020-03-08 19:18:46.304 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 19:18:46.342 +06:00 [INF] Request finished in 38.1671ms 200 text/html
2020-03-08 19:18:46.375 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:46.376 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:46.382 +06:00 [INF] Request finished in 6.4829ms 200 text/css
2020-03-08 19:18:46.387 +06:00 [INF] Request finished in 10.9058ms 200 application/javascript
2020-03-08 19:18:46.523 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:46.526 +06:00 [INF] Request finished in 3.3954ms 200 font/woff2
2020-03-08 19:18:48.136 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/details/7  
2020-03-08 19:18:48.162 +06:00 [INF] Request finished in 26.2995ms 200 text/html
2020-03-08 19:18:48.208 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:48.209 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:48.217 +06:00 [INF] Request finished in 8.7369ms 200 text/css
2020-03-08 19:18:48.230 +06:00 [INF] Request finished in 20.3625ms 200 application/javascript
2020-03-08 19:18:48.344 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:48.347 +06:00 [INF] Request finished in 2.7269ms 200 font/woff2
2020-03-08 19:18:50.323 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:18:50.338 +06:00 [INF] Request finished in 13.6457ms 200 application/json
2020-03-08 19:18:52.351 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:18:52.360 +06:00 [INF] Request finished in 9.1896ms 200 application/json
2020-03-08 19:18:54.371 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:18:54.377 +06:00 [INF] Request finished in 6.4233ms 200 application/json
2020-03-08 19:18:55.130 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 19:18:55.151 +06:00 [INF] Request finished in 21.4817ms 200 text/html
2020-03-08 19:18:55.196 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:55.197 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:55.209 +06:00 [INF] Request finished in 13.1235ms 200 text/css
2020-03-08 19:18:55.213 +06:00 [INF] Request finished in 15.1193ms 200 application/javascript
2020-03-08 19:18:55.357 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:55.361 +06:00 [INF] Request finished in 3.4208ms 200 font/woff2
2020-03-08 19:18:57.289 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:18:57.306 +06:00 [INF] Request finished in 17.1795ms 200 application/json
2020-03-08 19:18:57.559 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/scheduled  
2020-03-08 19:18:57.570 +06:00 [INF] Request finished in 10.9645ms 200 text/html
2020-03-08 19:18:57.613 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:57.615 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:57.636 +06:00 [INF] Request finished in 22.7665ms 200 text/css
2020-03-08 19:18:57.640 +06:00 [INF] Request finished in 25.354ms 200 application/javascript
2020-03-08 19:18:57.765 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:57.804 +06:00 [INF] Request finished in 38.9791ms 200 font/woff2
2020-03-08 19:18:58.553 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 19:18:58.560 +06:00 [INF] Request finished in 7.9578ms 200 text/html
2020-03-08 19:18:58.590 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:18:58.592 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:18:58.602 +06:00 [INF] Request finished in 13.3221ms 200 text/css
2020-03-08 19:18:58.605 +06:00 [INF] Request finished in 12.9976ms 200 application/javascript
2020-03-08 19:18:58.783 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:18:58.789 +06:00 [INF] Request finished in 6.3372ms 200 font/woff2
2020-03-08 19:19:00.184 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/details/7  
2020-03-08 19:19:00.195 +06:00 [INF] Request finished in 10.2468ms 200 text/html
2020-03-08 19:19:00.235 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:19:00.238 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:19:00.244 +06:00 [INF] Request finished in 9.5699ms 200 text/css
2020-03-08 19:19:00.256 +06:00 [INF] Request finished in 17.8046ms 200 application/javascript
2020-03-08 19:19:00.416 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:19:00.419 +06:00 [INF] Request finished in 5.2348ms 200 font/woff2
2020-03-08 19:19:01.724 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;  
            GO
2020-03-08 19:21:32.992 +06:00 [INF] Starting web host
2020-03-08 19:21:34.392 +06:00 [INF] User profile is available. Using 'C:\Users\Emon\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2020-03-08 19:21:34.896 +06:00 [WRN] Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data, this mode should only be enabled during development.
2020-03-08 19:21:34.947 +06:00 [INF] Entity Framework Core 2.2.6-servicing-10079 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.Sqlite' with options: SensitiveDataLoggingEnabled 
2020-03-08 19:21:35.098 +06:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:21:35.121 +06:00 [INF] Executed DbCommand (8ms) [Parameters=[@__normalizedName_0='NORMALUSER' (Size = 10)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:21:35.148 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:21:35.150 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedName_0='ADMINISTRATOR' (Size = 13)], CommandType='"Text"', CommandTimeout='30']
SELECT "r"."Id", "r"."ConcurrencyStamp", "r"."Description", "r"."Name", "r"."NormalizedName"
FROM "MyRoles" AS "r"
WHERE "r"."NormalizedName" = @__normalizedName_0
LIMIT 1
2020-03-08 19:21:35.161 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:21:35.163 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER1' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:21:35.195 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:21:35.197 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='3S' (Size = 2)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:21:35.220 +06:00 [WRN] User e7e0eb5c-d57d-495f-b532-32aa3f15d5ce validation failed: DuplicateUserName.
2020-03-08 19:21:35.223 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:21:35.225 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='USER2' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:21:35.234 +06:00 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
PRAGMA foreign_keys=ON;
2020-03-08 19:21:35.238 +06:00 [INF] Executed DbCommand (1ms) [Parameters=[@__normalizedUserName_0='ADMIN' (Size = 5)], CommandType='"Text"', CommandTimeout='30']
SELECT "u"."Id", "u"."AccessFailedCount", "u"."ConcurrencyStamp", "u"."Email", "u"."EmailConfirmed", "u"."FirstName", "u"."LastName", "u"."LockoutEnabled", "u"."LockoutEnd", "u"."NormalizedEmail", "u"."NormalizedUserName", "u"."PasswordHash", "u"."PhoneNumber", "u"."PhoneNumberConfirmed", "u"."SecurityStamp", "u"."TwoFactorEnabled", "u"."UserName"
FROM "MyUsers" AS "u"
WHERE "u"."NormalizedUserName" = @__normalizedUserName_0
LIMIT 1
2020-03-08 19:21:35.240 +06:00 [WRN] User a4e894ca-8dba-400c-ae83-9c662c5eed59 validation failed: DuplicateUserName.
2020-03-08 19:21:35.294 +06:00 [INF] Start installing Hangfire SQL objects...
2020-03-08 19:21:35.358 +06:00 [INF] Hangfire SQL objects installed.
2020-03-08 19:21:35.378 +06:00 [INF] Starting Hangfire Server using job storage: '<Connection string can not be parsed>'
2020-03-08 19:21:35.380 +06:00 [INF] Using the following options for Hangfire Server:
    Worker count: 1
    Listening queues: 'default'
    Shutdown timeout: 00:00:15
    Schedule polling interval: 00:00:15
2020-03-08 19:21:35.616 +06:00 [INF] Server tasksvchangfireserver:21072:6bb53542 successfully announced in 205.8653 ms
2020-03-08 19:21:35.663 +06:00 [INF] Server tasksvchangfireserver:21072:6bb53542 is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, Worker, DelayedJobScheduler, RecurringJobScheduler...
2020-03-08 19:21:35.722 +06:00 [INF] 2 servers were removed due to timeout
2020-03-08 19:21:35.738 +06:00 [INF] Server tasksvchangfireserver:21072:6bb53542 all the dispatchers started
2020-03-08 19:21:35.949 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/  
2020-03-08 19:21:36.031 +06:00 [INF] Executing endpoint 'Page: /Index'
2020-03-08 19:21:36.122 +06:00 [INF] Route matched with {page = "/Index", area = ""}. Executing page /Index
2020-03-08 19:21:36.139 +06:00 [INF] Executing handler method ThreeS.Routine.Pages.IndexModel.OnGet - ModelState is "Valid"
2020-03-08 19:21:36.260 +06:00 [INF] Executed handler method OnGet, returned result .
2020-03-08 19:21:36.263 +06:00 [INF] Executing an implicit handler method - ModelState is "Valid"
2020-03-08 19:21:36.266 +06:00 [INF] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
2020-03-08 19:21:36.444 +06:00 [INF] Executed page /Index in 317.8988ms
2020-03-08 19:21:36.446 +06:00 [INF] Executed endpoint 'Page: /Index'
2020-03-08 19:21:36.456 +06:00 [INF] Request finished in 508.2404ms 200 text/html; charset=utf-8
2020-03-08 19:21:38.180 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:39.070 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:39.910 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:40.867 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:41.680 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:42.498 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:43.500 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:44.326 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:45.126 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:45.920 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:46.704 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:47.471 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:48.317 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:49.132 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:50.027 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:50.773 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:51.319 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs  
2020-03-08 19:21:51.471 +06:00 [INF] Request finished in 152.2273ms 200 text/html
2020-03-08 19:21:51.514 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:21:51.516 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:21:51.560 +06:00 [INF] Request finished in 44.6366ms 200 text/css
2020-03-08 19:21:51.560 +06:00 [INF] Request finished in 46.7606ms 200 application/javascript
2020-03-08 19:21:51.582 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:51.675 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:21:51.678 +06:00 [INF] Request finished in 2.6661ms 200 font/woff2
2020-03-08 19:21:52.435 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:53.227 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:53.763 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 228
2020-03-08 19:21:53.800 +06:00 [INF] Request finished in 37.2539ms 200 application/json
2020-03-08 19:21:54.214 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:54.751 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/enqueued  
2020-03-08 19:21:54.784 +06:00 [INF] Request finished in 33.2851ms 200 text/html
2020-03-08 19:21:54.830 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:21:54.831 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:21:54.840 +06:00 [INF] Request finished in 10.5188ms 200 text/css
2020-03-08 19:21:54.844 +06:00 [INF] Request finished in 13.149ms 200 application/javascript
2020-03-08 19:21:54.962 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:21:54.966 +06:00 [INF] Request finished in 4.7536ms 200 font/woff2
2020-03-08 19:21:55.053 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:55.912 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:56.588 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/processing  
2020-03-08 19:21:56.629 +06:00 [INF] Request finished in 40.7452ms 200 text/html
2020-03-08 19:21:56.666 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:21:56.667 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:21:56.674 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:56.675 +06:00 [INF] Request finished in 7.123ms 200 text/css
2020-03-08 19:21:56.696 +06:00 [INF] Request finished in 28.6659ms 200 application/javascript
2020-03-08 19:21:56.800 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:21:56.811 +06:00 [INF] Request finished in 10.8501ms 200 font/woff2
2020-03-08 19:21:57.838 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:58.638 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:21:58.853 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:21:58.860 +06:00 [INF] Request finished in 6.9035ms 200 application/json
2020-03-08 19:21:59.009 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/jobs/details/7  
2020-03-08 19:21:59.039 +06:00 [INF] Request finished in 29.739ms 200 text/html
2020-03-08 19:21:59.089 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/js1790  
2020-03-08 19:21:59.091 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/css1790  
2020-03-08 19:21:59.108 +06:00 [INF] Request finished in 18.6533ms 200 application/javascript
2020-03-08 19:21:59.112 +06:00 [INF] Request finished in 20.7987ms 200 text/css
2020-03-08 19:21:59.222 +06:00 [INF] Request starting HTTP/2.0 GET https://localhost:44392/jobs/fonts/glyphicons-halflings-regular/woff2  
2020-03-08 19:21:59.224 +06:00 [INF] Request finished in 1.967ms 200 font/woff2
2020-03-08 19:21:59.394 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:00.386 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:01.168 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:01.203 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:01.208 +06:00 [INF] Request finished in 5.2732ms 200 application/json
2020-03-08 19:22:02.031 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:02.960 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:03.218 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:03.225 +06:00 [INF] Request finished in 6.6024ms 200 application/json
2020-03-08 19:22:03.604 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:04.401 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:05.180 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:05.233 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:05.238 +06:00 [INF] Request finished in 4.6134ms 200 application/json
2020-03-08 19:22:05.989 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:06.739 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:07.246 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:07.251 +06:00 [INF] Request finished in 5.9262ms 200 application/json
2020-03-08 19:22:07.500 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:08.275 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:09.085 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:09.265 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:09.276 +06:00 [INF] Request finished in 11.9097ms 200 application/json
2020-03-08 19:22:09.859 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:10.651 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:11.288 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:11.295 +06:00 [INF] Request finished in 5.7287ms 200 application/json
2020-03-08 19:22:12.393 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:13.156 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:13.308 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:13.314 +06:00 [INF] Request finished in 5.5757ms 200 application/json
2020-03-08 19:22:14.498 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:15.242 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:15.322 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:15.328 +06:00 [INF] Request finished in 6.51ms 200 application/json
2020-03-08 19:22:16.008 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:16.807 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:17.336 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:17.342 +06:00 [INF] Request finished in 5.5425ms 200 application/json
2020-03-08 19:22:17.635 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:19.349 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:19.358 +06:00 [INF] Request finished in 8.7831ms 200 application/json
2020-03-08 19:22:21.370 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:21.375 +06:00 [INF] Request finished in 5.1555ms 200 application/json
2020-03-08 19:22:23.381 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:23.387 +06:00 [INF] Request finished in 5.6615ms 200 application/json
2020-03-08 19:22:25.250 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:25.398 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:25.412 +06:00 [INF] Request finished in 14.4351ms 200 application/json
2020-03-08 19:22:27.421 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:27.436 +06:00 [INF] Request finished in 15.2551ms 200 application/json
2020-03-08 19:22:29.453 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:29.463 +06:00 [INF] Request finished in 9.9623ms 200 application/json
2020-03-08 19:22:30.372 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:31.475 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:31.480 +06:00 [INF] Request finished in 6.244ms 200 application/json
2020-03-08 19:22:33.489 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:33.495 +06:00 [INF] Request finished in 6.3418ms 200 application/json
2020-03-08 19:22:34.350 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:35.504 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:35.513 +06:00 [INF] Request finished in 8.6908ms 200 application/json
2020-03-08 19:22:35.842 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:37.347 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:37.525 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:37.538 +06:00 [INF] Request finished in 12.9108ms 200 application/json
2020-03-08 19:22:38.950 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:39.552 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:39.558 +06:00 [INF] Request finished in 6.0983ms 200 application/json
2020-03-08 19:22:41.598 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:41.615 +06:00 [INF] Request finished in 17.0298ms 200 application/json
2020-03-08 19:22:43.634 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:43.640 +06:00 [INF] Request finished in 5.9235ms 200 application/json
2020-03-08 19:22:45.649 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:45.655 +06:00 [INF] Request finished in 6.439ms 200 application/json
2020-03-08 19:22:47.236 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:47.663 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:47.669 +06:00 [INF] Request finished in 5.7186ms 200 application/json
2020-03-08 19:22:49.679 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:49.684 +06:00 [INF] Request finished in 5.0194ms 200 application/json
2020-03-08 19:22:49.729 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:51.691 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:51.699 +06:00 [INF] Request finished in 7.6258ms 200 application/json
2020-03-08 19:22:53.706 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:53.712 +06:00 [INF] Request finished in 5.395ms 200 application/json
2020-03-08 19:22:55.725 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:55.742 +06:00 [INF] Request finished in 17.5672ms 200 application/json
2020-03-08 19:22:56.124 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:57.079 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:57.753 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:57.759 +06:00 [INF] Request finished in 6.0097ms 200 application/json
2020-03-08 19:22:57.950 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:58.991 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:22:59.768 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:22:59.773 +06:00 [INF] Request finished in 5.2739ms 200 application/json
2020-03-08 19:23:00.010 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:01.783 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:01.789 +06:00 [INF] Request finished in 6.1858ms 200 application/json
2020-03-08 19:23:03.799 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:03.805 +06:00 [INF] Request finished in 6.5487ms 200 application/json
2020-03-08 19:23:05.817 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:05.823 +06:00 [INF] Request finished in 6.1944ms 200 application/json
2020-03-08 19:23:07.381 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:07.832 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:07.837 +06:00 [INF] Request finished in 5.8567ms 200 application/json
2020-03-08 19:23:08.294 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:09.129 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:09.845 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:09.852 +06:00 [INF] Request finished in 7.01ms 200 application/json
2020-03-08 19:23:10.272 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:11.463 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:11.860 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:11.865 +06:00 [INF] Request finished in 5.3233ms 200 application/json
2020-03-08 19:23:12.346 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:13.238 +06:00 [INF] Executed Command  SET NOCOUNT ON;  
            DECLARE @objectid int;  
            DECLARE @indexid int;  
            DECLARE @partitioncount bigint;  
            DECLARE @schemaname nvarchar(130);   
            DECLARE @objectname nvarchar(130);   
            DECLARE @indexname nvarchar(130);   
            DECLARE @partitionnum bigint;  
            DECLARE @partitions bigint;  
            DECLARE @frag float;  
            DECLARE @command nvarchar(4000);   
            -- Conditionally select tables and indexes from the sys.dm_db_index_physical_stats function   
            -- and convert object and index IDs to names.  
            SELECT 
                object_id AS objectid,  
                index_id AS indexid,  
                partition_number AS partitionnum,  
                avg_fragmentation_in_percent AS frag  
            INTO #work_to_do  
            FROM sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL , NULL, 'LIMITED')  
            WHERE avg_fragmentation_in_percent > 10.0 AND index_id > 0;  
 
            -- Declare the cursor for the list of partitions to be processed.  
            DECLARE partitions CURSOR FOR SELECT * FROM #work_to_do;  
 
            -- Open the cursor.  
            OPEN partitions;  
 
            -- Loop through the partitions.  
            WHILE (1=1)  
                BEGIN;  
                    FETCH NEXT 
                        FROM partitions  
                        INTO @objectid, @indexid, @partitionnum, @frag;  
                    IF @@FETCH_STATUS < 0 BREAK;  
                    SELECT @objectname = QUOTENAME(o.name), @schemaname = QUOTENAME(s.name)  
                    FROM sys.objects AS o  
                    JOIN sys.schemas as s ON s.schema_id = o.schema_id  
                    WHERE o.object_id = @objectid;  
                    SELECT @indexname = QUOTENAME(name)  
                    FROM sys.indexes  
                    WHERE  object_id = @objectid AND index_id = @indexid;  
                    SELECT @partitioncount = count (*)  
                    FROM sys.partitions  
                    WHERE object_id = @objectid AND index_id = @indexid;  
 
            -- 30 is an arbitrary decision point at which to switch between reorganizing and rebuilding.  
                    IF @frag < 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REORGANIZE';  
                    IF @frag >= 30.0  
                        SET @command = N'ALTER INDEX ' + @indexname + N' ON ' + @schemaname + N'.' + @objectname + N' REBUILD';  
                    IF @partitioncount > 1  
                        SET @command = @command + N' PARTITION=' + CAST(@partitionnum AS nvarchar(10));
                    PRINT N'Executing: ' + @command;  
            EXEC (@command);  
                    PRINT N'Executed: ' + @command;  
                END;  
 
            -- Close and deallocate the cursor.  
            CLOSE partitions;  
            DEALLOCATE partitions;  
 
            -- Drop the temporary table.  
            DROP TABLE #work_to_do;
2020-03-08 19:23:13.873 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:13.878 +06:00 [INF] Request finished in 5.6868ms 200 application/json
2020-03-08 19:23:15.887 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:15.893 +06:00 [INF] Request finished in 6.1874ms 200 application/json
2020-03-08 19:23:17.903 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:17.908 +06:00 [INF] Request finished in 5.3364ms 200 application/json
2020-03-08 19:23:19.918 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:19.926 +06:00 [INF] Request finished in 8.3096ms 200 application/json
2020-03-08 19:23:21.934 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:21.941 +06:00 [INF] Request finished in 6.5206ms 200 application/json
2020-03-08 19:23:23.950 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:23.956 +06:00 [INF] Request finished in 5.3372ms 200 application/json
2020-03-08 19:23:25.967 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:25.978 +06:00 [INF] Request finished in 11.106ms 200 application/json
2020-03-08 19:23:27.988 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:27.995 +06:00 [INF] Request finished in 6.9137ms 200 application/json
2020-03-08 19:23:30.005 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:30.015 +06:00 [INF] Request finished in 10.0329ms 200 application/json
2020-03-08 19:23:32.028 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:32.034 +06:00 [INF] Request finished in 6.2036ms 200 application/json
2020-03-08 19:23:34.043 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:34.049 +06:00 [INF] Request finished in 5.966ms 200 application/json
2020-03-08 19:23:36.058 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:36.064 +06:00 [INF] Request finished in 6.3024ms 200 application/json
2020-03-08 19:23:38.072 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:38.078 +06:00 [INF] Request finished in 5.934ms 200 application/json
2020-03-08 19:23:40.098 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:40.116 +06:00 [INF] Request finished in 18.6794ms 200 application/json
2020-03-08 19:23:42.129 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:42.135 +06:00 [INF] Request finished in 5.8851ms 200 application/json
2020-03-08 19:23:44.143 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:44.154 +06:00 [INF] Request finished in 10.8818ms 200 application/json
2020-03-08 19:23:46.162 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:46.168 +06:00 [INF] Request finished in 5.6597ms 200 application/json
2020-03-08 19:23:48.177 +06:00 [INF] Request starting HTTP/2.0 POST https://localhost:44392/jobs/stats application/x-www-form-urlencoded; charset=UTF-8 392
2020-03-08 19:23:48.182 +06:00 [INF] Request finished in 5.7695ms 200 application/json
